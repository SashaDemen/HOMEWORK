import os, requests, datetime

API_KEY = os.environ.get("OPENWEATHER_API_KEY")

def _recommendation(main: str) -> str:
    m = (main or "").lower()
    if "thunder" in m:
        return "–í—ñ–∑—å–º–∏ '–ú'—è—Å–Ω—É' ‚Äî –µ–Ω–µ—Ä–≥—ñ—ó –≤–∏—Å—Ç–∞—á–∏—Ç—å –Ω–∞ –≥—Ä–æ–∑–∏!"
    if "rain" in m or "drizzle" in m:
        return "–°–æ–∫–æ–≤–∏—Ç–∞ '–ü–µ–ø–µ—Ä–æ–Ω—ñ' –∑—ñ–≥—Ä—ñ—î –≤ –¥–æ—â ‚òî"
    if "snow" in m:
        return "–•–æ—á–µ—Ç—å—Å—è —Ç–µ–ø–ª–æ–≥–æ ‚Äî '4 –°–∏—Ä–∏' —ñ–¥–µ–∞–ª—å–Ω–æ ‚ùÑÔ∏è"
    if "clear" in m:
        return "–°–æ–Ω—è—á–Ω–æ? –ö–ª–∞—Å–∏—á–Ω–∞ '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞' —Å–∞–º–µ —Ç–µ ‚òÄÔ∏è"
    if "cloud" in m:
        return "–•–º–∞—Ä–Ω–æ? –°–ø—Ä–æ–±—É–π '–ì–∞–≤–∞–π—Å—å–∫—É' –∑ –∞–Ω–∞–Ω–∞—Å–æ–º ‚òÅÔ∏è"
    return "–ë—É–¥—å-—è–∫–∞ –ø—ñ—Ü–∞ ‚Äî –≥–∞—Ä–Ω–∞ —ñ–¥–µ—è üòä"

def get_weather(city: str, date_str: str):
    if not API_KEY:
        return {"error":"Set OPENWEATHER_API_KEY env var", "recommendation":"–í—ñ–∑—å–º–∏ –±—É–¥—å-—è–∫—É –ø—ñ—Ü—É :)", "source":"none"}

    try:
        target_date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
    except Exception:
        target_date = datetime.date.today()

    today = datetime.date.today()
    try:
        if target_date <= today:
            # use current weather (close enough for demo)
            url = "https://api.openweathermap.org/data/2.5/weather"
            r = requests.get(url, params={"q": city, "appid": API_KEY, "units":"metric"}, timeout=8)
            data = r.json()
            main = (data.get("weather") or [{}])[0].get("main","")
            temp = (data.get("main") or {}).get("temp")
            return {
                "city": data.get("name") or city,
                "date": target_date.isoformat(),
                "temp": temp,
                "main": main,
                "source": "current",
                "recommendation": _recommendation(main),
            }
        else:
            # forecast 5-day/3h
            url = "https://api.openweathermap.org/data/2.5/forecast"
            r = requests.get(url, params={"q": city, "appid": API_KEY, "units":"metric"}, timeout=8)
            data = r.json()
            best = None
            target_dt = datetime.datetime.combine(target_date, datetime.time(12,0))
            for item in data.get("list", []):
                dt = datetime.datetime.fromtimestamp(item.get("dt",0))
                if best is None or abs(dt - target_dt) < abs(best["dt"] - target_dt):
                    best = {"dt": dt, "item": item}
            if not best:
                return {"error":"No forecast found", "source":"forecast"}
            itm = best["item"]
            main = (itm.get("weather") or [{}])[0].get("main","")
            temp = (itm.get("main") or {}).get("temp")
            city_name = (data.get("city") or {}).get("name") or city
            return {
                "city": city_name,
                "date": target_date.isoformat(),
                "temp": temp,
                "main": main,
                "source": "forecast",
                "recommendation": _recommendation(main),
            }
    except Exception as e:
        return {"error": str(e), "recommendation":"–ó–∞–º–æ–≤ '–ú–∞—Ä–≥–∞—Ä–∏—Ç—É' ‚Äî –Ω–µ –ø—Ä–æ–≥–∞–¥–∞—î—à", "source":"error"}
