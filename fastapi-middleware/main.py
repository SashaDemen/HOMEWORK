from datetime import datetime, timezone
from typing import Callable, Iterable

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse, Response
from starlette.middleware.base import BaseHTTPMiddleware

app = FastAPI(title="FastAPI with Custom Middleware")


class LoggingAndHeaderMiddleware(BaseHTTPMiddleware):
    """
    1) –õ–æ–≥—É—î –º–µ—Ç–æ–¥, URL —ñ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É.
    2) –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Custom-Header (–¥–ª—è –∑–∞—Ö–∏—â–µ–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤).
    –Ø–∫—â–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ–º–∞—î ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î 400 —ñ –ù–ï –ø–µ—Ä–µ–¥–∞—î –∑–∞–ø–∏—Ç –¥–∞–ª—ñ.
    """

    def __init__(self, app: FastAPI, *, exclude_paths: Iterable[str] = ()):
        super().__init__(app)
        # –®–ª—è—Ö–∏, –¥–ª—è —è–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ù–ï –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π
        self.exclude_paths = set(exclude_paths)

    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        # 1) –õ–æ–≥—É–≤–∞–Ω–Ω—è –º–æ–º–µ–Ω—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        now = datetime.now(tz=timezone.utc).isoformat()
        print(f"[{now}] {request.method} {request.url}")

        # 2) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–∑–∞ –≤–∏–Ω—è—Ç–∫–æ–º exclude_paths)
        path = request.url.path
        if path not in self.exclude_paths:
            if "X-Custom-Header" not in request.headers:
                print(f" -> missing X-Custom-Header for {path}; return 400")
                return JSONResponse(
                    {"detail": "Missing required header: X-Custom-Header"},
                    status_code=400,
                )

        return await call_next(request)


# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ middleware –∑ –≤–∏–Ω—è—Ç–∫–∞–º–∏
app.add_middleware(
    LoggingAndHeaderMiddleware,
    exclude_paths=("/docs", "/redoc", "/openapi.json", "/public"),
)


@app.get("/public")
def public():
    """–ü—É–±–ª—ñ—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç, –Ω–µ –≤–∏–º–∞–≥–∞—î X-Custom-Header."""
    return {"ok": True, "msg": "This is a public endpoint (no header required)."}


@app.get("/ping")
def ping():
    """–ü—Ä–æ—Å—Ç–∏–π GET, –≤–∏–º–∞–≥–∞—î X-Custom-Header."""
    return {"ok": True, "msg": "pong"}


@app.post("/echo")
async def echo(payload: dict):
    """POST, –ø–æ–≤–µ—Ä—Ç–∞—î —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É."""
    return {"ok": True, "received": payload}


@app.get("/secure-info")
def secure_info():
    """–ó–∞—Ö–∏—â–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó 400 –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
    return {"ok": True, "msg": "Top secret ü§´"}


@app.get("/")
def root():
    return {
        "info": "Custom middleware demo.",
        "docs": "/docs",
        "try": ["/public", "/ping", "/echo", "/secure-info"],
        "header_required": "X-Custom-Header for all except /public, /docs, /redoc, /openapi.json",
    }
